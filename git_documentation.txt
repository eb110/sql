git GOLDEN RULES

- it is always good to install git bash 
- and then use it as a main terminal source

- if we want to create a new git (not depend on clone one)
- git init

- git repository has got a structure of a branch
- at the top is the 'root branch' usually called 'main'
- from the root branch emerges child branches

                    -- ticket
        -- develop
main --
        -- test
                    -- unit

- new branch always points to main
- it is not possible to create a totally independent branch
- to make the 'ticket' point to 'develop'
- checkout to develop and create a new branch with -u flag

- lets say 'develop' has new commit. to have this change in 'ticket' 
- have to checkout to 'ticket' and pull 'develop'
- then push it to remote

- lets say 'ticket' has new commit. to have this change in 'develop'
- have to checkout to 'develop' and merge 'ticket'
- then push it to remote

- to have 'remote' repo we have to have git oline account
- to have the access to the repo we have to clone it
- to have the admin access - clone it with attached token

- to limit the content sent to remote repo
- attach gitignore

- to check what branches are pointing to what check log section

ADD ###########################################################

git add .
git commit -m "description"
git push

BRANCH ########################################################

change branch
git checkout <name of branch>

get remote branch
git branch -a
git checkout origin/<name of online branch>
git checkout <name of online branch>

list of local branches
git branch

list of remote branches
git branch -r

new local branch based on main
git branch <branchname>

new local branch based on current branch
git checkout <branch to point to>
git checkout -b <new branch>

new local branch based on another branch creadted from main branch level
git checkout main
git checkout -b <new branch name> <name of the branch to point to>

new remote branch
git branch <new branch name>
git checkout <new branch name>
git push origin <new branch name>

remove of local branch
git branch -D <name of the branch>

remove of remote branch
git push -d origin <name of the branch>

rename local
git branch -m <old branch name> <new branch name>

rename remote
git push -d <old branch name>
git push <new branch name>

CLONE ###################################################################

clone online repository with admin access
git clone https://<token>@github.com/<git remote user>/<git remote repo>

COMMIT ##################################################################

git add .
git commit -m "description"
git push

GITIGNORE

file that consist a list of contens which will be skipped during the git push to repo
ideally it should be placed in root branch to 'cover' the entire project
add new file '.gitignore'
example:
node_modules/

in this configuration - node_modules catalogue is not going to be pushed to remote

INIT ####################################################################

go to the root folder of the project
git init

LOG ####################################################################

list child branches
git branch --contains

MERGE ###################################################################

git checkout <parrent branch>
git merge <name of branch>
git push <name of parrent branch>

PULL ####################################################################

pull remote branch
git pull origin <name of branch>

pull remote parrent branch 
git checkout <child branch>
git pull origin <parrent branch name>
git push origin <child branch>

PUSH #####################################################################

git add .
git commit -m "description"

local push
git push

remote push
git push origin <name of branch>

STATUS #####################################################################
git status